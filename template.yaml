AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  ProductionApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: ProductionApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /unicorn:
            get:
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnicorn.Arn}/invocations
              responses: {}
          /unicorn/{Name}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnicornDetails.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      Variables:
        stage: production
  ProductionApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: !Sub ${AWS::StackName}-ProductionApiKey
  ProductionUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ProductionApi
          Stage: !Ref ProductionApi.Stage
      UsagePlanName: !Sub ${AWS::StackName}-ProductionUsagePlan
  ProductionUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ProductionApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ProductionUsagePlan
  StagingApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: StagingApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        securityDefinitions:
          api_key:
            type: apiKey
            name: x-api-key
            in: header
        paths:
          /unicorn:
            get:
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnicorn.Arn}/invocations
              responses: {}
          /unicorn/{Name}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUnicornDetails.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      Variables:
        stage: staging
  StagingApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: !Sub ${AWS::StackName}-StagingApiKey
  StagingUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref StagingApi
          Stage: !Ref StagingApi.Stage
      UsagePlanName: !Sub ${AWS::StackName}-StagingUsagePlan
  StagingUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref StagingApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref StagingUsagePlan
  GetUnicorn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetUnicorn
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetUnicorn
      CodeUri: src/getUnicorn
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        ProductionApiGETunicorn:
          Type: Api
          Properties:
            Path: /unicorn
            Method: GET
            RestApiId: !Ref ProductionApi
        StagingApiGETunicorn:
          Type: Api
          Properties:
            Path: /unicorn
            Method: GET
            RestApiId: !Ref StagingApi
    Metadata:
      StackeryName: GetUnicorn
  GetUnicornDetails:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetUnicornDetails
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetUnicornDetails
      CodeUri: src/getUnicornDetails
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        StagingApiGETunicornName:
          Type: Api
          Properties:
            Path: /unicorn/{Name}
            Method: GET
            RestApiId: !Ref StagingApi
        ProductionApiGETunicornName:
          Type: Api
          Properties:
            Path: /unicorn/{Name}
            Method: GET
            RestApiId: !Ref ProductionApi
    Metadata:
      StackeryName: GetUnicornDetails
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)